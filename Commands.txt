Week 1:

cat("\014")  	# Clear the console log

install.packages("ggplot2" , dependencies=TRUE)
library()

x<-5
y<-5
z=x+y
z

vectorV <- c(1,2,3,4,5,6,7)
vectorR <- seq(0,100, by=2)

median(vectorV)
mode(vectorR)

# It is neccasary to create your own mode function
myMode <- function(x){
xtable <- table(x)		# Creates a table object of x
idx <- xtable == max(xtable)	
names(xtable)[idx]
}

rm(vectorV)

# Maths on vectors
# Creating a vector with values 1 to 10

xvector <- c(1:10)
xvector + 1 	# add 1 to each element of x
xvector ^2 	# square each element of x
xvector /2 	# divide each element of x by 2
10 * xvector  	# multiply each element of x by 10

# Creating a new vector with values 10 to 1 in that order
yvector <-c(10:1)
xvector*yvector	# Produces a new vector with elements: xvector[1] * yvector[1]


# Creating a variable x and preforming common data transformations
xvar <- 4 
sqrt(xvar)	# square root of variable
sqrt(xvar +0.5) # modified square root transformation
log(xvar)	# the log of the variable
log10(xvar)	# log base of 10
exp(xvar)	# exponential of variable
abs(xvar)	# absolute value of variable

# Statistics in R
sum(x) 		# the sum of values in x
length(x) 	# number of elements (including missing)
mean(x) 	# arithmetic mean
var(x) 		# sample variance
sd(x) 		# sample standard deviation
min(x) 		# smallest element in x
max(x) 		# largest element in x

# Functions on Character data
namesList <- c("iggy","bowie", "lou reed", "tupac")

casefold(namesList ) 		# convert to lower case
casefold(namesList ,upper=TRUE) # convert to upper case
substr(namesList ,2,4) 	       	# extract 2nd to 4th characters of each element of x
paste(namesList ,"zz",sep="") 	# paste "zz" to the end of each element in x
nchar(namesList ) 		# no. of characters in each element of x
grep("ry",x) 			# which elements of x contain letter "a" ?
strsplit(x,"a") 		# split x into pieces wherever the letter "a" occurs


# logical data

z <- c(TRUE, TRUE, FALSE)	# collection of true and false values
x <- c(-10, -5,-1,0,3,92)	# collection of numbers now preform operations on them
x < 0 & abs(x) > 5		# elements in the collection of x who are less than 0 ad greater than 5
TRUE FALSE FALSE FALSE FALSE FALSE

x < 0 | abs(x) > 5		# less than 0 or greater than 5
TRUE  TRUE  TRUE FALSE FALSE  TRUE

x[x < 0 | abs(x) > 5]		# less than 0 or greater than 5, return the numbers
-10  -5  -1  92
 


# Combine vectors to make a data frame
custno <- c(1:7)
loyalty_level <- c(100,100,90,90,40,40,50)
location <- c("madrid","madrid","london","london","dublin","paris","paris")
mydata <- data.frame(customer_number = custno, loyalty_level = loyalty_level, city = location, stringsAsFactors = FALSE)

# When this is complete we will have a data frame that looks like this
	Customer_Number	loyalty_level	city	
1		1		100	madrid
2		2		100	madrid
3		3		90	london
4		4		90	london
5		5		40	dublin
6		6		40	paris
7		7		50	paris



# Read data from the web and form a table
theUrl <- "http://www.jaredlander.com/data/Tomato%20First.csv"
tomatoes <- read.table(file = theUrl, header = TRUE, sep = ",") 
head(tomatoes)
# This produces the table
  Round             Tomato Price      Source Sweet Acid Color
1     1         Simpson SM  3.99 Whole Foods   2.8  2.8   3.7
2     1  Tuttorosso (blue)  2.99     Pioneer   3.3  2.8   3.4
3     1 Tuttorosso (green)  0.99     Pioneer   2.8  2.6   3.3
4     1     La Fede SM DOP  3.99   Shop Rite   2.6  2.8   3.0
5     2       Cento SM DOP  5.49  D Agostino   3.3  3.1   2.9
6     2      Cento Organic  4.99  D Agostino   3.2  2.9   2.9

  Texture Overall Avg.of.Totals Total.of.Avg
1     3.4     3.4          16.1         16.1
2     3.0     2.9          15.3         15.3
3     2.8     2.9          14.3         14.3
4     2.3     2.8          13.4         13.4
5     2.8     3.1          14.4         15.2
6     3.1     2.9          15.5         15.1


# Normalising data - generate summary statistics
# Dataset to a data frame
weathernum <-read.table(file ="C:/Users/x00108966/Documents/EnterpiseDatabaseTechnologies/Rdatasets/weathernumeric.txt", stringsAsFactors=FALSE, sep =",", header=TRUE)
# Show the first 10 records
weathernum[1:10,]
# Summary for Temperature and Humidity
summary(weathernum$temperature)
summary(weathernum$humidity)

# Minmax normalization is a normalization strategy which linearly transforms x to y= (x-min)/(max-min), where min and max are the minimum and maximum values in X, where X is the set of observed values of x. 
mnormal.humidty <- (weathernum$humidity - min(weathernum$humidity))/(max(weathernum$humidity) - min(weathernum$humidity))
summary(mnormal.humidty)


# We can transform the distribution in different ways in an attempt to reduce skewness and
achieve a symmetric distribution.
# Read dataset on cars
cars2 <- read.csv(file="C:/Users/x00108966/Documents/EnterpiseDatabaseTechnologies/Rdatasets/cars2.txt", stringsAsFactors = TRUE)
# natural log transformation
natlog.weightlbs <- log(cars2$weightlbs)
natlog.weightlbs
# square root transformation
sqrt.weightlbs <- sqrt(cars2$weightlbs)
sqrt.weightlbs
# Inverse square root transformation
invsqrt.weightlbs <- 1/sqrt(cars2$weightlbs)
invsqrt.weightlbs



# Binning data (converting numerical data to categorical)
# Unsupervised: preforms this conversion without the target class information
data <- c(1,11,2,1,1,2,13,11,44,2,12,1)
n <- length(data)
bins <- 3
whichbin <-c(rep(0,n))
whichbin <-c(rep(0,n))

freq <- n/bins
# sort the data
sorted <- sort(data)
for(i in 1:bins) {
    for(j in 1:n) {
        if ((i-1)*freq <j && j<=i*freq)
           whichbin[j] <- i
    }
 }


# Creating a histogram and a scatter plot
# Import the data set
cars <- read.csv(file = "C:/Users/garet/College/4th year/Semester 8/Enterprise Database Technologies/EnterpiseDatabaseTechnologies/Rdatasets/cars2.txt", stringsAsFactors = TRUE)
# Set the plot area
par(mfrow=c(1,1))
# Create a histogram based on the weight of cars in pounds
hist(cars$weightlbs,
      breaks=30,
      xlim= c(0,5000),
      col="blue",
      border="black",
      ylim=c(0,40),
      xlab="Weight in lbs",
      ylab="Counts",
      main="Histogram of Car Weights")
 box(which="plot", lty="solid", col="black")
 

# Create a histogram of mpg by weight
plot(cars$weightlbs, cars$mpg,
 xlim= c(0,5000),
 ylim=c(0,600),
 xlab="Weight",
 ylab="MPG",
 main="Scatter Plot of MPG by Weight",
 type ="p",
 pch=16,
 col="blue")
points(cars$weightlbs,
 cars$mpg,
 type="p",
 col="red")

# Outliers are outside of the normal data, away from the IQR
# Correalted is a mutal relationship: one thing will effect the other
# In this case MPG and Weight of a car are strongly correlated


